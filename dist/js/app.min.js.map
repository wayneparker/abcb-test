{"version":3,"sources":["app.min.js"],"names":["taskTracker","loadJSON","buildList","taskData","window","onsubmit","addTask","console","log","request","XMLHttpRequestFAKE","open","onload","this","status","JSON","parse","response","statusText","alert","onerror","send","tasks","li","ul","taskList","frag","document","createDocumentFragment","i","length","createListItem","name","date","assigned","appendChild","dateStr","item","createElement","innerHTML","event","preventDefault","getElementById","value","dateFormat","newTask","unshift","insertBefore","firstChild","taskForm","reset","dateString","d","Date","month","getMonth","day","getDate","year","getFullYear","ready","init","readyState","addEventListener","fakeJSON","onreadystatechange","responseText","responseXML","responseType","mimeType","abort","method","url","async","stringify","overrideMimeType","newMimeType","querySelector"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Created by Wayne Parker on 5/22/16.\n */\n\n(function () {\n\n\t'use strict';\n\n\t//\n\t//## Initialize globals\n\n\tvar taskData = {}; // Local task data; will be populated with “server” data by loadJSON()\n\tvar taskForm = document.querySelector('form.task-tracker__create'); // Reference to task entry form\n\tvar taskList = document.querySelector('ul.task-list');              // Reference to task list\n\n\n\t//\n\t//## Main App initialization\n\n\tfunction taskTracker() {\n\t\tloadJSON();                // Get JSON data from (fake) XMLHttpRequest\n\t\tbuildList(taskData);       // Convert JSON data to DOM objects, render to HTML\n\t\twindow.onsubmit = addTask; // Set up event handler to process form when submitted\n\t\t\t\t\tconsole.log('Set-up complete, Task Tracker is now running!');\n\t}\n\n\n\t//\n\t//## Get JSON data from (fake) XMLHttpRequest, store in local taskData object\n\n\tfunction loadJSON() {\n\n\t\tvar request = new XMLHttpRequestFAKE();\n\t\trequest.open('GET', 'data.json', true);\n\n\t\trequest.onload = function() {\n\t\t\tif (this.status >= 200 && this.status < 400) {\n\t\t\t\t// Success!\n\t\t\t\ttaskData = JSON.parse(this.response);\n\t\t\t\t\t\t\tconsole.log ('status: ' + this.statusText); // TESTING\n\t\t\t\t\t\t\tconsole.log ('response: ' + this.response); // TESTING\n\t\t\t\t\t\t\tconsole.log ('parsed response as Object:'); // TESTING\n\t\t\t\t\t\t\tconsole.log (taskData); // TESTING\n\t\t\t} else {\n\t\t\t\twindow.alert('The server responded with an error. JSON data not loaded.');\n\t\t\t}\n\t\t};\n\t\trequest.onerror = function() {\n\t\t\twindow.alert('The server did not respond. JSON data not loaded.');\n\t\t};\n\n\t\trequest.send();\n\t}\n\n\n\t//\n\t//## Convert JSON data to list items, insert into DOM\n\n\tfunction buildList(tasks) {\n\t\tvar ul = taskList;\n\t\tvar li;\n\t\t// OK, docFrag is totally overkill for such a simple exercise, but hey, I'm a professional\n\t\tvar frag = document.createDocumentFragment();\n\t\t// Create DOM elements for each task, append to documentFragment to avoid multiple DOM repaints\n\t\tfor (var i = 0; i < tasks.length; i++) {\n\t\t\tli = createListItem(tasks[i].name, tasks[i].date, tasks[i].assigned);\n\t\t\tfrag.appendChild(li);\n\t\t}\n\t\t// Update the DOM all at once, because performance!\n\t\tul.appendChild(frag);\n\t\t\t\t\tconsole.log('Finished appending initial tasks to list');\n\t}\n\n\n\t//\n\t//## Create single task DOM element\n\n\tfunction createListItem(name, dateStr, assigned) {\n\t\tvar item = document.createElement('li');\n\t\titem.innerHTML =\n\t\t\t'<span class=\"task-name\">' + name + '</span>' +\n\t\t\t'<span class=\"task-date\">' + dateStr + '</span>' +\n\t\t\t'<span class=\"task-assigned\">' + assigned + '</span>' +\n\t\t\t'</li>\\n';\n\t\t\t\t\tconsole.log('Task DOM element created: ');\n\t\t\t\t\tconsole.log(item);\n\t\treturn item;\n\t}\n\n\n\t//\n\t//## Form Submit, create and add new task to data and DOM\n\n\tfunction addTask(event) {\n\n\t\tevent.preventDefault();\n\n\t\t// Get form data and create new task object\n\t\tvar name = document.getElementById('task-tracker__name').value;\n\t\tvar dateStr = dateFormat(document.getElementById('task-tracker__date').value);\n\t\tvar assigned = document.getElementById('task-tracker__assigned').value;\n\t\tvar newTask = {\n\t\t\t'name': name,\n\t\t\t'date': dateStr,\n\t\t\t'assigned': assigned\n\t\t};\n\t\t// Prepend object element to taskData\n\t\ttaskData.unshift(newTask);\n\t\t\t\t\tconsole.log('New task added to taskData: ');\n\t\t\t\t\tconsole.log(newTask);\n\n\t\t// Prepend new DOM element to task list\n\t\tvar ul = taskList;\n\t\tvar li = createListItem(name, dateStr, assigned);\n\t\tul.insertBefore(li, ul.firstChild);\n\n\t\t// Reset form\n\t\ttaskForm.reset();\n\t}\n\n\n\t//\n\t//## Utility functions\n\n\tfunction dateFormat(dateString) {\n\t\tvar d = new Date(dateString);\n\t\tvar month = d.getMonth() + 1;\n\t\tvar day = d.getDate();\n\t\tvar year = d.getFullYear();\n\t\treturn month + \"/\" + day + \"/\" + year;\n\t}\n\n\n\t//\n\t//## Initialize when document is loaded\n\n\tfunction ready(init) {\n\t\tif (document.readyState != 'loading'){\n\t\t\tinit();\n\t\t} else {\n\t\t\tdocument.addEventListener('DOMContentLoaded', init);\n\t\t}\n\t}\n\n\tready( taskTracker() );\n\n\n\n\n\n\n\n\n\n\n\t//\n\t//######### Do not look below. It is not the code you are looking for.\n\t//\n\n\n\n\n\n\n\n\n\n\n\t//\n\t//## XMLHttpRequestFAKE - Emulate AJAX behavior without a remote server\n\t//\n\t// TODO: make this a separate module for general XHR testing\n\n\tfunction XMLHttpRequestFAKE() {\n\n\t\t// Data provided by client for exercise:\n\t\tvar fakeJSON =\n\t\t\t[\n\t\t\t\t{\"name\": \"Test Task #1\", \"date\": \"12/01/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #2\", \"date\": \"12/02/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #3\", \"date\": \"12/03/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #4\", \"date\": \"12/04/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #5\", \"date\": \"12/05/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #6\", \"date\": \"12/06/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #7\", \"date\": \"12/07/2012\", \"assigned\": \"John Doe\" }\n\t\t\t];\n\n\t\treturn {\n\t\t\tonreadystatechange: function() { },\n\t\t\tonload: function() { },\n\t\t\tonerror: function() { },\n\t\t\treadyState: 0,\n\t\t\tresponse: null,\n\t\t\tresponseText: null,\n\t\t\tresponseXML: null,\n\t\t\tresponseType: '',\n\t\t\tmimeType: 'text/text',\n\t\t\tstatus: 0,\n\t\t\tstatusText: '',\n\n\t\t\tabort: function() {\n\t\t\t\t// nothing to do, ignore\n\t\t\t},\n\n\t\t\topen: function( method, url, async ) {\n\t\t\t\t// nothing to do, just log the call\n\t\t\t\tconsole.log('XMLHttpRequestFAKE.open(\\'' + method + '\\', \\'' + url + '\\', ' + async + '\\')');\n\t\t\t},\n\n\t\t\tsend: function() {\n\t\t\t\t// Just Do It\n\t\t\t\tthis.status = 200;\n\t\t\t\tthis.statusText = '200 OK';\n\t\t\t\t// convert data into text stream\n\t\t\t\tthis.response = JSON.stringify(fakeJSON);\n\t\t\t\tthis.responseText = this.response;\n\t\t\t\tthis.readyState = 4;\n\t\t\t\t// All done, fire callbacks\n\t\t\t\tthis.onreadystatechange();\n\t\t\t\tthis.onload();\n\t\t\t\t// Th-th-that’s all, folks!\n\t\t\t},\n\n\t\t\toverrideMimeType: function(newMimeType) {\n\t\t\t\tthis.mimeType = newMimeType; // not used\n\t\t\t}\n\n\t\t};\n\t}\n\n})();\n\n//# sourceMappingURL=app.min.js.map\n"],"sourceRoot":"/source/"}