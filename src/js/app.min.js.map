{"version":3,"sources":["/source/app.js"],"names":["taskTracker","taskData","loadData","buildList","window","onsubmit","addTask","console","log","url","serverData","request","XMLHttpRequestFAKE","open","onload","this","status","JSON","parse","response","statusText","alert","onerror","send","tasks","li","ul","taskList","frag","document","createDocumentFragment","i","length","createListItem","name","date","assigned","appendChild","dateStr","item","createElement","innerHTML","event","preventDefault","getElementById","value","dateFormat","newTask","unshift","insertBefore","firstChild","taskForm","reset","dateString","d","Date","month","getMonth","day","getDate","year","getFullYear","ready","init","readyState","addEventListener","fakeJSON","onreadystatechange","responseText","responseXML","responseType","mimeType","abort","method","async","stringify","overrideMimeType","newMimeType","querySelector"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Task Tracker v2.0\n * Test Exercise for ABCB\n *\n * Created by Wayne Parker on 5/22/16\n */\n\n(function () {\n\n\t'use strict';\n\n\t//\n\t//## Initialize globals\n\n\tvar taskData = {}; // Local task data; will be populated with “server” data by loadData()\n\tvar taskForm = document.querySelector('form.task-tracker__create'); // Reference to task entry form\n\tvar taskList = document.querySelector('ul.task-list');              // Reference to task list\n\n\n\t//\n\t//## Main App initialization\n\n\tfunction taskTracker() {\n\t\ttaskData = loadData('data.json'); // Get JSON data from (fake) XMLHttpRequest\n\t\tbuildList(taskData);              // Convert JSON data to DOM objects, render to HTML\n\t\twindow.onsubmit = addTask;        // Set event handler to process form when submitted\n\t\t\t\t\tconsole.log('Set-up complete, Task Tracker is now running!');\n\t}\n\n\n\t//\n\t//## Get JSON data from (fake) XMLHttpRequest, store in local taskData object\n\n\tfunction loadData(url) {\n\n\t\tvar serverData = {};\n\t\tvar request = new XMLHttpRequestFAKE();\n\t\trequest.open('GET', url, true);\n\n\t\trequest.onload = function() {\n\t\t\tif (this.status >= 200 && this.status < 400) {\n\t\t\t\t// Success!\n\t\t\t\tserverData = JSON.parse(this.response);\n\t\t\t\t\t\t\tconsole.log ('status: ' + this.statusText); // TESTING\n\t\t\t\t\t\t\tconsole.log ('response: ' + this.response); // TESTING\n\t\t\t\t\t\t\tconsole.log ('parsed response as Object:'); // TESTING\n\t\t\t\t\t\t\tconsole.log (serverData); // TESTING\n\t\t\t} else {\n\t\t\t\twindow.alert('The server responded with an error. JSON data not loaded.');\n\t\t\t}\n\t\t};\n\n\t\trequest.onerror = function() {\n\t\t\twindow.alert('The server did not respond. JSON data not loaded.');\n\t\t};\n\n\t\trequest.send();\n\n\t\treturn serverData;\n\t}\n\n\n\t//\n\t//## Convert JSON data to list items, insert into DOM\n\n\tfunction buildList(tasks) {\n\t\tvar ul = taskList;\n\t\tvar li;\n\t\t// OK, docFrag is totally overkill for such a simple exercise, but hey, I’m a professional\n\t\tvar frag = document.createDocumentFragment();\n\t\t// Create DOM elements for each task, append to documentFragment to avoid multiple DOM repaints\n\t\tfor (var i = 0; i < tasks.length; i++) {\n\t\t\tli = createListItem(tasks[i].name, tasks[i].date, tasks[i].assigned);\n\t\t\tfrag.appendChild(li);\n\t\t}\n\t\t// Update the DOM all at once, because performance!\n\t\tul.appendChild(frag);\n\t\t\t\t\tconsole.log('Finished appending initial tasks to list');\n\t}\n\n\n\t//\n\t//## Create single task DOM element\n\n\tfunction createListItem(name, dateStr, assigned) {\n\t\tvar item = document.createElement('li');\n\t\titem.innerHTML =\n\t\t\t'<span class=\"task-name\">' + name + '</span>' +\n\t\t\t'<span class=\"task-date\">' + dateStr + '</span>' +\n\t\t\t'<span class=\"task-assigned\">' + assigned + '</span>' +\n\t\t\t'</li>\\n';\n\t\t\t\t\tconsole.log('Task DOM element created: ');\n\t\t\t\t\tconsole.log(item);\n\t\treturn item;\n\t}\n\n\n\t//\n\t//## Form Submit, create and add new task to data and DOM\n\n\tfunction addTask(event) {\n\n\t\tevent.preventDefault();\n\n\t\t// Get form data and create new task object\n\t\tvar name = document.getElementById('task-tracker__name').value;\n\t\tvar dateStr = dateFormat(document.getElementById('task-tracker__date').value);\n\t\tvar assigned = document.getElementById('task-tracker__assigned').value;\n\t\tvar newTask = {\n\t\t\t'name': name,\n\t\t\t'date': dateStr,\n\t\t\t'assigned': assigned\n\t\t};\n\t\t// Prepend object element to taskData\n\t\ttaskData.unshift(newTask);\n\t\t\t\t\tconsole.log('New task added to taskData: ');\n\t\t\t\t\tconsole.log(newTask);\n\n\t\t// Prepend new DOM element to task list\n\t\tvar ul = taskList;\n\t\tvar li = createListItem(name, dateStr, assigned);\n\t\tul.insertBefore(li, ul.firstChild);\n\n\t\t// Reset form\n\t\ttaskForm.reset();\n\t}\n\n\n\t//\n\t//## Utility functions\n\n\n\t// Coerce date into mm-dd-yyy format string\n\tfunction dateFormat(dateString) {\n\t\tvar d = new Date(dateString);\n\t\tvar month = d.getMonth() + 1;\n\t\tvar day = d.getDate();\n\t\tvar year = d.getFullYear();\n\t\treturn month + \"/\" + day + \"/\" + year;\n\t}\n\n\n\t//\n\t//## Initialize when document is loaded\n\n\t// ($(document).ready() is a crutch. Just let go.)\n\n\tfunction ready(init) {\n\t\tif (document.readyState != 'loading'){\n\t\t\tinit();\n\t\t} else {\n\t\t\tdocument.addEventListener('DOMContentLoaded', init);\n\t\t}\n\t}\n\n\tready( taskTracker() );\n\n\n\n\n\n\n\n\n\n\n\n\t//\n\t//######### Do not look below. It is not the code you are looking for.\n\t//\n\n\n\n\n\n\n\n\n\n\n\t//\n\t//## XMLHttpRequestFAKE - Emulate AJAX behavior without a remote server\n\t//\n\t// TODO: make this a separate module for general XHR testing\n\n\tfunction XMLHttpRequestFAKE() {\n\n\t\t// Data provided by client for exercise:\n\t\tvar fakeJSON =\n\t\t\t[\n\t\t\t\t{\"name\": \"Test Task #1\", \"date\": \"12/01/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #2\", \"date\": \"12/02/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #3\", \"date\": \"12/03/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #4\", \"date\": \"12/04/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #5\", \"date\": \"12/05/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #6\", \"date\": \"12/06/2012\", \"assigned\": \"John Doe\" },\n\t\t\t\t{\"name\": \"Test Task #7\", \"date\": \"12/07/2012\", \"assigned\": \"John Doe\" }\n\t\t\t];\n\n\t\treturn {\n\t\t\tonreadystatechange: function() { },\n\t\t\tonload: function() { },\n\t\t\tonerror: function() { },\n\t\t\treadyState: 0,\n\t\t\tresponse: null,\n\t\t\tresponseText: null,\n\t\t\tresponseXML: null,\n\t\t\tresponseType: '',\n\t\t\tmimeType: 'text/text',\n\t\t\tstatus: 0,\n\t\t\tstatusText: '',\n\n\t\t\tabort: function() {\n\t\t\t\t// nothing to do, ignore\n\t\t\t},\n\n\t\t\topen: function( method, url, async ) {\n\t\t\t\t// nothing to do, just log the call\n\t\t\t\tconsole.log('XMLHttpRequestFAKE.open(\\'' + method + '\\', \\'' + url + '\\', ' + async + '\\')');\n\t\t\t},\n\n\t\t\tsend: function() {\n\t\t\t\t// Just Do It\n\t\t\t\tthis.status = 200;\n\t\t\t\tthis.statusText = '200 OK';\n\t\t\t\t// convert data into text stream\n\t\t\t\tthis.response = JSON.stringify(fakeJSON);\n\t\t\t\tthis.responseText = this.response;\n\t\t\t\tthis.readyState = 4;\n\t\t\t\t// All done, fire callbacks\n\t\t\t\tthis.onreadystatechange();\n\t\t\t\tthis.onload();\n\t\t\t\t// Th-th-that’s all, folks!\n\t\t\t},\n\n\t\t\toverrideMimeType: function(newMimeType) {\n\t\t\t\tthis.mimeType = newMimeType; // not used\n\t\t\t}\n\n\t\t};\n\t}\n\n})();\n"],"sourceRoot":"/source/"}